Great tutorial on 2D collision
http://www.metanetsoftware.com/technique/tutorialA.html

------------------
Arrays
------------------
Use ES:DI and DS:SI
Good example in snippets/array.asm

------------------
Calculating resultant velocity:
    Elastic collision
------------------
SIMPLE, BOOTLEG PHYSICS:
(DXi, DYi) => (DXf, DYf)
if horizontal wall,
    DXf = -DXi
    DYf = DYi
if vertical wall,
    DXf = DXi
    DYf = -DYi

LEGIT PHYSICS:
"Newton's Rule (i.e. the conservation of momentum) applies to the components of velocity resolved along the common normal surfaces of the colliding bodies at the point of contact. In the case of the two spheres the velocity components involved are the components resolved along the line of centers during the contact. Consequently, the components of velocity perpendicular to the line of centers will be unchanged during the impact." 

-- find the final velocities in the normal reference frame
-- the x velocities will obey the rules for a 1-D collision
set v1fxr = ((m1-m2)*v1xr+(m2+m2)*v2xr)/(m1+m2)
set v2fxr = ((m1+m1)*v1xr+(m2-m1)*v2xr)/(m1+m2)
-- the y velocities will not be changed
set v1fyr = v1yr
set v2fyr = v2yr

We now have the 'after collision' velocities, but we have to transform the components back to the standard x-y reference frame. In this particular case, the velocity of the red puck was entirely in the standard y-direction (so our x-velocity in the standard reference frame is zero).

The relevant code (once again) is very dependent on angles!

-- convert back to the standard x,y coordinates
set v1fx = cos(phi)*v1fxr+cos(phi+pi()/2)*v1fyr
set v1fy = sin(phi)*v1fxr+sin(phi+pi()/2)*v1fyr
set v2fx = cos(phi)*v2fxr+cos(phi+pi()/2)*v2fyr
set v2fy = sin(phi)*v2fxr+sin(phi+pi()/2)*v2fyr


------------------
Drawing to the Screen
------------------
320 * 200 = 64000 dec bytes to represent the screen
(319, 0) = 319dec or 13F hex
(0, 1) = 320dec or 140 hex
offset = (row * 320) + column

"double buffer"
    use a part of memory where we prep a frame before drawing it

Ports: 3C8h is used to set color (output color index), 
    3C7h is used for reading palette values (output color index)
    3C9h is used to output color component data in RGB.
	------------------
		MODE X
	------------------
	The offset M of pixel N
	 in display memory is M = N/4, and the plane P of pixel N is P = N mod 4.  For
	 display memory writes, the plane is selected by setting bit P of the Map Mask
	 register (Sequence Controller register 2) to 1 and all other bits to 0; for
	 display memory reads, the plane is selected by setting the Read Map register
	 (Graphics Controller register 4) to P.

Listing Five (page 156)
 overcomes both these problems by tailoring the fill technique to the
 organization of display memory.  Each plane is filled in its entirety in one
 burst before the next plane is processed, so only five OUTs are required in
 all, and REP STOS can indeed be used.

	------------------
	UNCHAINED MODE
	------------------
	The VGA card has 256K of memory. Many SVGA cards have much more, but even on those cards, VGA modes can only access the first 256K-except for mode 0x13, which can only access 64K. The reason is that mode 0x13 is a chain-4 mode, which basically means only every forth byte of video memory is used. The reason for this is because the linear structure of the video memory allowed fast and easy video memory access. Turning off chain-4 mode allows the program to access of all 256K of video memory, but involves more complicated programming.

	In unchained mode, memory exists in four 64K planes. Each plane corresponds to a specific column of video memory: plane 0 contains pixels 0, 4, 8, etc.; plane 1 contains pixels 1, 5, 9, etc.; plane 2 contains columns 2, 6, 10, etc.; and plane 3 contains columns 3, 7, 11, etc. (Figure 22). So to plot a pixel at position (5,7), plane 1 is selected, and the offset is (320*7+5)/4 = 561. 

	ENTERING UNCHAINED MODE
		Since unchained mode is not a standard VGA mode, it cannot be set using a BIOS function call. Instead, certain VGA registers have to be tweaked. It involves two VGA controllers: the sequence controller (port 0x3C4) and the CRT controller (port 0x3D4).

		/* VGA sequence controller */
		#define SC_INDEX      0x03c4
		#define SC_DATA       0x03c5
		
		/* VGA CRT controller */
		#define CRTC_INDEX    0x03d4
		#define CRTC_DATA     0x03d5
		
		#define MEMORY_MODE   0x04
		#define UNDERLINE_LOC 0x14
		#define MODE_CONTROL  0x17

		...

		/* turn off chain-4 mode */
		outp(SC_INDEX, MEMORY_MODE);
		outp(SC_DATA, 0x06);

		/* TODO: Insert code to clear the screen here.
		   (the BIOS only sets every fourth byte
		   to zero -- the rest needs to be set to
		   zero, too) */

		/* turn off long mode */
		outp(CRTC_INDEX, UNDERLINE_LOC);
		outp(CRTC_DATA, 0x00);
		/* turn on byte mode */
		outp(CRTC_INDEX, MODE_CONTROL);
		outp(CRTC_DATA, 0xe3);

	PLANE SELECT
		The Map Mask register is located at index 2 of the Sequence Controller. To select the Map Mask register, write 2 to the Sequence Controller address at port 0x3C4. Then the Map Mask can be found at the Sequence Controller's data port at port 0x3C5.

		plane = (x&3);
		/* select the map mask register */
		outp(0x3c4, 0x02);
		/* write 2^plane */
		outp(0x3c5, 1 << plane);

		If a value other than a power of two was used to select a plane, MULTIPLE PLANES would be SELECTED. For example, if 13 (binary 1101) were used, planes 0, 2, and 3 would be selected. That means every plane selected is written with the color value. One use for this is fast screen-clearing. If every plane is selected, only 16,000 bytes need to be written, instead of 64,000 like in mode 0x13.

		/* set map mask to all 4 planes */
		outpw(0x3c4, 0xff02);
		memset(VGA,0, 16000);

	PAGE FLIPPING
	
		First, set up two word-sized variables to keep track of the visible and non-visible pages. These are offsets to video memory.

		unsigned int visible_page=0;
		unsigned int non_visible_page=320*200/4;

		Then do all the drawing to the non-visible page. For instance, if a pixel was to be plotted:

		/* select plane */
		outp(SC_INDEX, MAP_MASK);
		outp(SC_DATA,  1 << (x&3) );

		VGA[non_visible_page+(y<<6)+(y<<4)+(x>>2)]=color;

		When all the drawing is finished, it is time to switch the pages. The new offset is set through two registers on the CRT controller. The first, 0x0C, sets the upper 8-bits of the offset, and the second, 0x0D, sets the lower 8-bits.
		
		/* CRT controller registers */
		#define HIGH_ADDRESS 0x0C
		#define LOW_ADDRESS  0x0D
		
		...
		
		temp = visible_page;
		visible_page = non_visible_page;
		non_visible_page = temp;
		
		high_addr=HIGH_ADDRESS | (visible_page & 0xff00);
		low_addr =LOW_ADDRESS  | (visible_page << 8);
		
		while ((inp(INPUT_STATUS_1) & VRETRACE));
		outpw(CRTC_INDEX, high_addr);
		outpw(CRTC_INDEX, low_addr);
		while (!(inp(INPUT_STATUS_1) & VRETRACE));



	MEMORY LAYOUT - Figure 48.3 
		Occupies ~65536 addresses, aka FFFF or 1 byte

MEMORY LOCATIONS
	The video memory of the VGA is mapped to the PC's memory via a window in the range between segments 0xA0000 and 0xBFFFF in the PC's real mode address space (A000:0000 and B000:FFFF in segment:offset notation). Typically these starting segments are:

		* 0xA0000 for EGA/VGA graphics modes (64 KB)
		* 0xB0000 for monochrome text mode (32 KB)
		* 0xB8000 for color text mode and CGA-compatible graphics modes (32 KB)

------------------
Animation Pseudocode
------------------
while (running) {
	/* clear background */
	memset(double_buffer,0,SCREEN_SIZE);
	/* animate objects */

	/* point to the next image in the animation */
	//What exactly does this do???
	bitmap_offset+=BITMAP_WIDTH;
	if ((bitmap_offset%bmp.width)==0)
		bitmap_offset+=bmp.width*(BITMAP_HEIGHT-1);

	/* show the buffer */
	//Note that having string copy would be really handy here
	memcpy(VGA,double_buffer,SCREEN_SIZE); //byte *VGA=(byte *)0xA0000000L;        /* this points to video memory. */
}

------------------
BMP format
------------------
Pixels are stored "upside-down", starting in bottom left, going left-to-right, bottom-to-top

http://www.fileformat.info/format/bmp/egff.htm

http://en.wikipedia.org/wiki/BMP_file_format
typedef struct _WinBMPFileHeader
{
	WORD   FileType;     /* File type, always 4D42h (ASCII "BM") */
	DWORD  FileSize;     /* Size of the file in bytes (only if file is compressed, else 0) */
	WORD   Reserved1;    /* Always 0 */
	WORD   Reserved2;    /* Always 0 */
	DWORD  BitmapOffset; /* Starting position of image data in bytes */
		OURS = 3e, so bitmap BEGINS at 3E
} WINBMPFILEHEADER;

HEADER: (40dec long)
	12h 	4 	the bitmap width in pixels (signed integer).
					12h = b, so width 11
	16h 	4 	the bitmap height in pixels (signed integer).
					16h = b, so width 11
	1Ch 	2 	the number of bits per pixel, which is the color depth of the image. Typical values are 1, 4, 8, 16, 24 and 32.
					1Ch = 1, so monochrome
	1Eh 	4 	the compression method being used. See the next table for a list of possible values.
					-OURS: none
	22h 	4 	the image size. This is the size of the raw bitmap data (see below), and should not be confused with the file size.

The following are the BMP RLE markers:

00 00           End of scan line
00 01           End of bitmap data
00 02 XX YY     Run offset marker

------------------
STRUCTS
------------------
; Source file 1:

EXTRN changecow:NEAR                ; Near function call

animals    STRUC                    ; Structure definition
    cat    db    "catfield      "
    dog    db    "dogfield      "   ; Field widths of 15 characters
    cow    db    "cowfield      "
animals    ENDS

.MODEL small

.DATA
           PUBLIC zoo
zoo        animals   <"felix","spot","Holstein">  ; Initialize fields

.CODE
main:      mov ax, @data            ; Make data addressable
           mov ds,ax
           mov es,ax                ; For string moves

           call changecow           ; Change "Holstein" to "Daisy"
           retf
           END main

; Source file 2:
;    In source file 2, structure definition must be available for the
; field offsets. (Normally it would be placed in an include file,
; then the INCLUDE operator would be used; however, for sake of
; clarity, the structure definition has been placed in both files).
;    The structure information must be included here to correctly
; associate the fields with the offset. The structure name does not
; need to be "animals"; however, the structure fields should
; correspond.

animals    STRUC                    ; Structure definition
    cat    db    "catfield      "
    dog    db    "dogfield      "   ; Field widths of 15 characters
    cow    db    "cowfield      "
animals    ENDS


.MODEL small

.DATA
EXTRN zoo:NEAR                       ; Let assembler know about zoo
newcow    db     "Daisy         "    ; Replace cow with new name
lenname   EQU    $ - newcow          ; Length of new name

.CODE
          PUBLIC changecow           ; Changes cow field to "Daisy"
changecow PROC
          mov     di, offset zoo.cow ; es:di should now point to
destination
          mov     si, offset newcow  ; ds:si should now point to the source
          mov     cx, lenname        ; Length of new string
          rep     movsb              ; Do replacement
          ret
changecow ENDP
          END


************************************************************
PREDEFINED INTERRUPTS GIVEN:
************************************************************
	Get Current Video Mode	10h		0Fh
		Return:
		AH = number of character columns
		AL = display mode (see #00010 at AH=00h)
		BH = active page (see AH=05h)
************************************************************
	Set Video Mode			10h		00h
************************************************************
	Scroll Up Window		10h		06h
		AH = 06h
		AL = number of lines by which to scroll up (00h = clear entire window)
		BH = attribute used to write blank lines at bottom of window
		CH,CL = row,column of window's upper left corner
		DH,DL = row,column of window's lower right corne
		RETURN: Nothing
************************************************************
	Direct Console Input	21h		06h
		AH = 06h
		DL = character (except FFh)

		Return:
		AL = character output (despite official docs which state nothing is returned) (at least DOS 2.1-7.0) 
************************************************************
	Get System Time			21h		2Ch
		RETURN:
		CH = hour CL = minute DH = second DL = 1/100 seconds

		NOTE: On most systems, the resolution of the system clock is about 5/100sec, so returned times generally do not increment by 1. On some systems, DL may always return 00h 
************************************************************
	Open Existing File		21h		3Dh
		AH = 3Dh
		AL = access and sharing modes (see #01402)
		DS:DX -> ASCIZ filename
		CL = attribute mask of files to look for (server call only)

		Return:
		CF clear if successful AX = file handle CF set on error AX = error code (01h,02h,03h,04h,05h,0Ch,56h) (see #01680 at AH=59h)

		Notes: File pointer is set to start of file. If SHARE or a network is loaded, the file open may fail if the file is already open, depending on the combination of sharing modes (see #01403,#01404). File handles which are inherited from a parent also inherit sharing and access restrictions. Files may be opened even if given the hidden or system attributes. Under the FlashTek X-32 DOS extender, the pointer is in DS:EDX. DR DOS checks the system password or explicitly supplied password at the end of the filename (following a semicolon) against the reserved field in the directory entry before allowing access. Sharing modes are only effective on local drives if SHARE is loaded 

		Bit(s)  Description     (Table 01402)
		2-0    access mode.
		000 read only.
		001 write only.
		010 read/write.
		011 (DOS 5+ internal) passed to redirector on EXEC to allow
		case-sensitive filenames
		3      reserved (0)
		6-4    sharing mode (DOS 3.0+) (see #01403).
		000 compatibility mode.
		001 "DENYALL" prohibit both read and write access by others.
		010 "DENYWRITE" prohibit write access by others.
		011 "DENYREAD" prohibit read access by others.
		100 "DENYNONE" allow full access by others.
		111 network FCB (only available during server call)
		7      inheritance.
		If set, file is private to current process and will not be inherited by child processes
************************************************************
	Read From File			21h		3Fh
		AH = 3Fh
		BX = file handle
		CX = number of bytes to read
		DS:DX -> buffer for data

		Return:
		CF clear if successful AX = number of bytes actually read (0 if at EOF before call) CF set on error AX = error code (05h,06h) (see #01680 at AH=59h/BX=0000h) 

************************************************************
	Close File				21h		3Eh
		Return:
		CF clear if successful
		AX destroyed
		CF set on error
		AX = error code (06h) (see #01680 at AH=59h/BX=0000h)
************************************************************
	Terminate With Return	21h		4Ch
************************************************************
